---
import 'the-new-css-reset'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
interface Props {
  title: string
  desc: string
  isTop?: boolean
}

const { title, desc, isTop } = Astro.props
---

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={desc} />

    <meta property="og:title" content="" />
    <meta property="og:type" content="" />
    <meta property="og:url" content="" />
    <meta property="og:image" content="" />
    <meta property="og:image:alt" content="" />

    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <!-- <link rel="apple-touch-icon" href="icon.png"> -->

    <script
      type="text/partytown"
      src="https://www.googletagmanager.com/gtag/js?id=G-FQ5WJVMXCS"
      is:inline></script>
    <script type="text/partytown" is:inline>
      window.dataLayer = window.dataLayer || []
      function gtag() {
        dataLayer.push(arguments)
      }
      gtag('js', new Date())

      gtag('config', 'G-FQ5WJVMXCS')
    </script>
    <link rel="sitemap" href="/sitemap-index.xml" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="preload"
      as="style"
      fetchpriority="high"
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap"
      media="print"
      onload='this.media="all"'
    />
  </head>
  <body>
    <Header isTop={isTop} />

    <main class="main">
      <slot />
    </main>

    <Footer />
  </body>
</html>
<style lang="scss" is:global>
  :root {
    --rem-unit: 16;

    --c-primary: #1a2633;
    --c-border-primary: #1a2633;
    --c-accent: #0063cc;

    --c-hover: rgb(104 152 204 / 0.2);

    --c-bg: #fff;

    --c-white: #fff;
    --c-gray: #f5f8fa;

    --fw-normal: 400;
    --fw-medium: 500;
    --fw-bold: 700;

    --lh-base: 1.6;
    --lh-l: 1.8;
    --lh-m: var(--lh-base);
    --lh-s: 1.4;
    --lh-xs: 1.2;

    --space-2xs: 4px;
    --space-xs: 8px;
    --space-s: 16px;
    --space-m: 24px;
    --space-l: 40px;
    --space-xl: 80px;
    --space-2xl: 120px;
    --gutter: 20px;

    --leading-trim: calc((1em - 1lh) / 2);
    --spacing-unit: 0.5rem;
    --spacing-xs: calc(var(--spacing-unit) / 2);
    --spacing-sm: var(--spacing-unit);
    --spacing-md: calc(var(--spacing-unit) * 2);
    --spacing-lg: calc(var(--spacing-unit) * 3);
    --spacing-xl: calc(var(--spacing-unit) * 5);
    --spacing-2xl: calc(var(--spacing-unit) * 8);
    --spacing-3xl: calc(var(--spacing-unit) * 13);
    --spacing-xs-trim: calc(var(--spacing-xs) + var(--leading-trim));
    --spacing-sm-trim: calc(var(--spacing-sm) + var(--leading-trim));
    --spacing-md-trim: calc(var(--spacing-md) + var(--leading-trim));
    --spacing-lg-trim: calc(var(--spacing-lg) + var(--leading-trim));
    --spacing-xl-trim: calc(var(--spacing-xl) + var(--leading-trim));
    --spacing-2xl-trim: calc(var(--spacing-2xl) + var(--leading-trim));
    --spacing-3xl-trim: calc(var(--spacing-3xl) + var(--leading-trim));
    --spacing-gutter: max(5svi, var(--spacing-md));

    @include mq(md) {
      --gutter: 80px;
      --content-width: 1200px;
    }
  }

  :is(body, body *),
  :is(body, body *):after,
  :is(body, body *):before {
    --clamp-viewport-min: 375;
    --clamp-viewport-max: 1200;
    --clamp-slope: calc(
      (var(--clamp-max) - var(--clamp-min)) /
        (var(--clamp-viewport-max) - var(--clamp-viewport-min))
    );
    --clamp-y-axis-intersection: calc(
      var(--clamp-min) - (var(--clamp-slope) * var(--clamp-viewport-min))
    );
    --clamp-preffered-value: calc(
      var(--clamp-y-axis-intersection) * (1rem / var(--rem-unit)) +
        (var(--clamp-slope) * 100svi)
    );
    --clamp: clamp(
      calc(var(--clamp-min) * (1rem / var(--rem-unit))),
      var(--clamp-preffered-value),
      calc(var(--clamp-max) * (1rem / var(--rem-unit)))
    );
    font-size: var(--clamp);
  }

  body {
    --clamp-viewport-min: 375;
    --clamp-viewport-max: 1200;
    --clamp-min: 14;
    --clamp-max: 16;

    min-height: 100dvh;
    color: var(--c-primary);
    font-family: 'Noto Sans JP', sans-serif;
    font-feature-settings: 'palt';
    line-height: var(--lh-base);
    @include mq(md) {
      padding-block-start: 32px;
    }
  }
  a {
    color: var(--c-primary);
  }
  .main {
    // margin-inline: var(--gutter);
    @include mq(md) {
      inline-size: 100%;
      max-inline-size: calc(var(--content-width) + var(--gutter) * 2);
      margin-inline: auto;
      padding-inline: var(--gutter);
    }
  }
  .markdown {
    --_spacing-start: var(--spacing-xl);
    --_spacing-end: var(--spacing-xl);
    & > * {
      line-height: var(--lh-l);
    }
    & > :where(:not(:first-child)) {
      margin-block-start: var(--_spacing-start);
    }
    & > :where(:not(:last-child)) {
      margin-block-end: var(--_spacing-end);
    }

    :where(p:not([class])) {
      --_spacing-start: var(--spacing-lg-trim);
      --_spacing-end: var(--spacing-lg-trim);
      b {
        font-weight: var(--fw-bold);
      }
    }
    :where(a:not([class])) {
      color: var(--c-accent);
      text-decoration-thickness: 1px;
      text-underline-offset: 0.1em;
      text-decoration: underline;
      transition: background-color 0.3s ease;
      &:hover {
        background-color: var(--c-hover);
      }
      &[target='_blank'] {
        &:after {
          content: '';
          display: inline-block;
          inline-size: 1rem;
          block-size: 1rem;
          margin-inline: 0.25rem;
          background-size: contain;
          background-repeat: no-repeat;
          background-position: center;
          background-image: url('data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2224%22%20height%3D%2224%22%20viewBox%3D%220%200%2024%2024%22%20fill%3D%22none%22%20stroke%3D%22%230063cc%22%20stroke-width%3D%222%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20class%3D%22icon%20icon-tabler%20icons-tabler-outline%20icon-tabler-external-link%22%3E%3Cpath%20stroke%3D%22none%22%20d%3D%22M0%200h24v24H0z%22%20fill%3D%22none%22%2F%3E%3Cpath%20d%3D%22M12%206h-6a2%202%200%200%200%20-2%202v10a2%202%200%200%200%202%202h10a2%202%200%200%200%202%20-2v-6%22%20%2F%3E%3Cpath%20d%3D%22M11%2013l9%20-9%22%20%2F%3E%3Cpath%20d%3D%22M15%204h5v5%22%20%2F%3E%3C%2Fsvg%3E');
        }
      }
    }
    :where(h2:not([class]), h3:not([class]), h4:not([class])) {
      scroll-margin-block-start: var(--space-m);
      font-weight: var(--fw-bold);
      font-feature-settings: 'palt';
      line-height: 1.375;
      letter-spacing: 0.05em;
      text-wrap: pretty;
      word-break: auto-phrase;
    }
    :where(h2:not([class])) {
      --clamp-min: 18;
      --clamp-max: 24;
      --_spacing-start: var(--spacing-2xl);
    }
    :where(h3:not([class])) {
      --clamp-min: 16;
      --clamp-max: 20;
      --_spacing-start: var(--spacing-2xl-trim);
      --_spacing-end: var(--spacing-xl-trim);
    }
    :where(ul:not([class])) {
      --_spacing-start: var(--spacing-xl-trim);
      --_spacing-end: var(--spacing-xl-trim);

      padding-inline-start: 1.5em;
      li {
        --_spacing-start: var(--spacing-xs-trim);
        --_spacing-end: var(--spacing-xs-trim);
        position: relative;

        &::before {
          content: '';
          display: block;
          inline-size: 6px;
          block-size: 6px;
          position: absolute;
          inset-block-start: 0.5lh;
          inset-inline-start: -1em;
          translate: 0 -50%;
          background-color: var(--c-accent);
        }
        & > ul {
          --_spacing-start: var(--spacing-xs-trim);
          --_spacing-end: var(--spacing-xs-trim);
        }
      }
    }
    :where(ol:not([class])) {
      --_spacing-start: var(--spacing-xl-trim);
      --_spacing-end: var(--spacing-xl-trim);

      counter-reset: cnt;
      padding-inline-start: 20px;
      & > li {
        --_spacing-start: var(--spacing-xs-trim);
        --_spacing-end: var(--spacing-xs-trim);
        position: relative;
        &::before {
          counter-increment: cnt;
          content: counter(cnt) '.';
          display: block;
          position: absolute;
          inset-block-start: 0;
          inset-inline-start: -20px;
          color: var(--c-accent);
        }
      }
    }
    blockquote {
      margin-block: 18px;
      padding: 1em 0.75em;
      border: 1px solid var(--c-accent);
      border-inline-start: 3px solid var(--c-accent);
      p {
        margin: 0;
      }
    }
    code {
      padding: 0 var(--space-xs);
      border-radius: 4px;
      // background-color: var(--c-sub-bg);
    }

    .msg {
      display: grid;
      grid-template-columns: 24px 1fr;
      gap: 10px;
      margin-block: 24px;
      padding: 20px 16px;
      background-color: #fff6e4;
    }
    .msg-symbol {
      display: grid;
      place-items: center;
      inline-size: 24px;
      block-size: 24px;
      color: #fff;
      font-weight: var(--fw-bold);
      line-height: 1;
      background-color: #ffb84c;
      border-radius: 50%;
    }
    .msg-content {
      p {
        margin: 0;
      }
    }
  }
</style>
